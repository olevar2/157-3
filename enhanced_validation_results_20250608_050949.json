{
  "timestamp": "2025-06-08T05:09:49.924962",
  "summary": {
    "total_indicators": 154,
    "successful_indicators": 88,
    "success_rate": 57.1,
    "error_categories": {
      "constructor_signature": 11,
      "data_format": 100,
      "missing_methods": 3,
      "missing_imports": 0,
      "parameter_validation": 0,
      "miscellaneous": 4,
      "framework_error": 0,
      "stub_implementation": 0
    },
    "patches_applied": [
      "engines.indicator_base.TechnicalIndicator_reset_patch"
    ]
  },
  "results": {
    "engines.basepatternengine": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in engines.basepatternengine. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.accumulationdistributionline": {
      "status": "passed",
      "result_type": "AccumulationDistributionSignal",
      "data_shape": "AccumulationDistributionSignal",
      "constructor_args": [
        "config"
      ]
    },
    "ai_enhancement.chaikinmoneyflow": {
      "status": "passed",
      "result_type": "ChaikinMoneyFlowSignal",
      "data_shape": "ChaikinMoneyFlowSignal",
      "constructor_args": [
        "config",
        "period"
      ]
    },
    "ai_enhancement.easeofmovement": {
      "status": "passed",
      "result_type": "Series",
      "data_shape": "Series[100]",
      "constructor_args": [
        "config",
        "period"
      ]
    },
    "ai_enhancement.forceindex": {
      "status": "passed",
      "result_type": "Series",
      "data_shape": "Series[100]",
      "constructor_args": [
        "config",
        "period"
      ]
    },
    "ai_enhancement.fractaladaptivemovingaverage": {
      "status": "passed",
      "result_type": "DataFrame",
      "data_shape": "DataFrame[100x7]",
      "constructor_args": [
        "period"
      ]
    },
    "ai_enhancement.fractalbreakoutindicator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 8 items",
      "constructor_args": []
    },
    "ai_enhancement.fractalchannelindicator": {
      "status": "passed",
      "result_type": "DataFrame",
      "data_shape": "DataFrame[100x11]",
      "constructor_args": [
        "period"
      ]
    },
    "ai_enhancement.fractalchaososcillator": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for ai_enhancement.fractalchaososcillator's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.fractalcorrelationdimension": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for ai_enhancement.fractalcorrelationdimension's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.fractalefficiencyratio": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 5 items",
      "constructor_args": [
        "period"
      ]
    },
    "ai_enhancement.fractalenergyindicator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 7 items",
      "constructor_args": [
        "period"
      ]
    },
    "ai_enhancement.fractalindicatortemplate": {
      "status": "passed",
      "result_type": "IndicatorResult",
      "data_shape": "IndicatorResult",
      "constructor_args": [
        "config"
      ]
    },
    "ai_enhancement.fractalmarkethypothesis": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": []
    },
    "ai_enhancement.fractalmarketprofile": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 8 items",
      "constructor_args": []
    },
    "ai_enhancement.fractalmomentumoscillator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 9 items",
      "constructor_args": []
    },
    "ai_enhancement.fractalvolumeanalysis": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 11 items",
      "constructor_args": []
    },
    "ai_enhancement.fractalwavecounter": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 8 items",
      "constructor_args": []
    },
    "ai_enhancement.hurstexponentcalculator": {
      "status": "passed",
      "result_type": "IndicatorResult",
      "data_shape": "IndicatorResult",
      "constructor_args": []
    },
    "ai_enhancement.institutionalflowdetector": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for ai_enhancement.institutionalflowdetector's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.klingeroscillator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in ai_enhancement.klingeroscillator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.liquidityflowindicator": {
      "status": "failed",
      "error": "Constructor error: TechnicalIndicator.__init__() missing 1 required positional argument: 'config'",
      "error_type": "TypeError",
      "error_category": "constructor_signature"
    },
    "ai_enhancement.mandelbrotfractalindicator": {
      "status": "passed",
      "result_type": "DataFrame",
      "data_shape": "DataFrame[233x8]",
      "constructor_args": []
    },
    "ai_enhancement.marketmicrostructureindicator": {
      "status": "failed",
      "error": "Constructor error: TechnicalIndicator.__init__() missing 1 required positional argument: 'config'",
      "error_type": "TypeError",
      "error_category": "constructor_signature"
    },
    "ai_enhancement.multifractaldfa": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for ai_enhancement.multifractaldfa's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.negativevolumeindex": {
      "status": "passed",
      "result_type": "Series",
      "data_shape": "Series[100]",
      "constructor_args": [
        "config"
      ]
    },
    "ai_enhancement.onbalancevolume": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in ai_enhancement.onbalancevolume. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.orderflowblocktradedetector": {
      "status": "failed",
      "error": "Constructor error: TechnicalIndicator.__init__() missing 1 required positional argument: 'config'",
      "error_type": "TypeError",
      "error_category": "constructor_signature"
    },
    "ai_enhancement.orderflowsequenceanalyzer": {
      "status": "failed",
      "error": "Constructor error: TechnicalIndicator.__init__() missing 1 required positional argument: 'config'",
      "error_type": "TypeError",
      "error_category": "constructor_signature"
    },
    "ai_enhancement.positivevolumeindex": {
      "status": "passed",
      "result_type": "Series",
      "data_shape": "Series[100]",
      "constructor_args": [
        "config"
      ]
    },
    "ai_enhancement.pricevolumerank": {
      "status": "passed",
      "result_type": "tuple",
      "data_shape": "tuple[3]",
      "constructor_args": [
        "config",
        "period"
      ]
    },
    "ai_enhancement.selfsimilaritydetector": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for ai_enhancement.selfsimilaritydetector's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.tickvolumeanalyzer": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in ai_enhancement.tickvolumeanalyzer. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.volumebreakoutdetector": {
      "status": "passed",
      "result_type": "VolumeBreakoutSignal",
      "data_shape": "VolumeBreakoutSignal",
      "constructor_args": [
        "config"
      ]
    },
    "ai_enhancement.volumedeltaindicator": {
      "status": "passed",
      "result_type": "VolumeDeltaSignal",
      "data_shape": "VolumeDeltaSignal",
      "constructor_args": [
        "config"
      ]
    },
    "ai_enhancement.volumeoscillator": {
      "status": "passed",
      "result_type": "Series",
      "data_shape": "Series[100]",
      "constructor_args": [
        "config"
      ]
    },
    "ai_enhancement.volumepricetrend": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in ai_enhancement.volumepricetrend. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.volumerateofchange": {
      "status": "passed",
      "result_type": "Series",
      "data_shape": "Series[100]",
      "constructor_args": [
        "config",
        "period"
      ]
    },
    "ai_enhancement.volumeweightedaverageprice": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in ai_enhancement.volumeweightedaverageprice. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.volumeweightedmarketdepthindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Missing order book data for ai_enhancement.volumeweightedmarketdepthindicator",
      "error_type": "ServiceError",
      "error_category": "miscellaneous",
      "traceback": "Traceback (most recent call last):\n  File \"D:\\MD\\Platform3\\engines\\volume\\volume_weighted_market_depth.py\", line 334, in calculate\n    raise ValueError(\"Missing order book data\")\nValueError: Missing order book data\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"D:\\MD\\Platform3\\enhanced_indicator_validator_fixed.py\", line 690, in _execute_calculation\n    result = calculate_method(test_data['dataframe'].copy())\n  File \"D:\\MD\\Platform3\\engines\\volume\\volume_weighted_market_depth.py\", line 391, in calculate\n    raise ServiceError(f\"Calculation failed: {str(e)}\")\nshared.error_handling.platform3_error_system.ServiceError: Calculation failed: Missing order book data\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"D:\\MD\\Platform3\\enhanced_indicator_validator_fixed.py\", line 371, in _validate_single_indicator\n    result = self._execute_calculation(indicator_instance, test_data, indicator_path)\n  File \"D:\\MD\\Platform3\\enhanced_indicator_validator_fixed.py\", line 703, in _execute_calculation\n    raise ServiceError(f\"Calculation failed: Missing order book data for {indicator_path}\") from e\nServiceError: Calculation failed: Missing order book data for ai_enhancement.volumeweightedmarketdepthindicator\n"
    },
    "ai_enhancement.awesomeoscillator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "fast_period",
        "slow_period"
      ]
    },
    "ai_enhancement.chandemomentumoscillator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "period"
      ]
    },
    "ai_enhancement.commoditychannelindex": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "period"
      ]
    },
    "ai_enhancement.detrendedpriceoscillator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "period"
      ]
    },
    "ai_enhancement.dynamiccorrelationindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in ai_enhancement.dynamiccorrelationindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.gannanglescalculator": {
      "status": "passed",
      "result_type": "IndicatorResult",
      "data_shape": "IndicatorResult",
      "constructor_args": []
    },
    "ai_enhancement.gannfanlines": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 12 items",
      "constructor_args": [
        "config"
      ]
    },
    "ai_enhancement.gannsquareofnine": {
      "status": "failed",
      "error": "Constructor error: IndicatorBase.__init__() got an unexpected keyword argument 'name'",
      "error_type": "TypeError",
      "error_category": "constructor_signature"
    },
    "ai_enhancement.knowsurething": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 5 items",
      "constructor_args": [
        "signal_period"
      ]
    },
    "ai_enhancement.macd": {
      "status": "passed",
      "result_type": "DataFrame",
      "data_shape": "DataFrame[100x16]",
      "constructor_args": [
        "fast_period",
        "slow_period",
        "signal_period"
      ]
    },
    "ai_enhancement.momentumindicator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "period"
      ]
    },
    "ai_enhancement.moneyflowindex": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for ai_enhancement.moneyflowindex's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.percentagepriceoscillator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 6 items",
      "constructor_args": [
        "fast_period",
        "slow_period",
        "signal_period"
      ]
    },
    "ai_enhancement.rateofchange": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "period"
      ]
    },
    "ai_enhancement.relativemomentumindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in ai_enhancement.relativemomentumindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "ai_enhancement.relativestrengthindex": {
      "status": "passed",
      "result_type": "DataFrame",
      "data_shape": "DataFrame[100x12]",
      "constructor_args": [
        "period"
      ]
    },
    "ai_enhancement.stochasticoscillator": {
      "status": "passed",
      "result_type": "DataFrame",
      "data_shape": "DataFrame[100x20]",
      "constructor_args": [
        "k_period",
        "d_period"
      ]
    },
    "ai_enhancement.trix": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 6 items",
      "constructor_args": [
        "config",
        "period",
        "signal_period"
      ]
    },
    "ai_enhancement.truestrengthindex": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 6 items",
      "constructor_args": []
    },
    "ai_enhancement.ultimateoscillator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "fast_period",
        "slow_period"
      ]
    },
    "ai_enhancement.williamsr": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "period"
      ]
    },
    "elliott_wave.fibonacciwaveprojections": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 8 items",
      "constructor_args": []
    },
    "elliott_wave.impulsivecorrectiveclassifier": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 12 items",
      "constructor_args": []
    },
    "fractal.fractalbreakoutindicator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 8 items",
      "constructor_args": []
    },
    "fractal.fractalchannelindicator": {
      "status": "passed",
      "result_type": "DataFrame",
      "data_shape": "DataFrame[100x11]",
      "constructor_args": [
        "period"
      ]
    },
    "fractal.fractalchaososcillator": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for fractal.fractalchaososcillator's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "fractal.fractalcorrelationdimension": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for fractal.fractalcorrelationdimension's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "fractal.fractalefficiencyratio": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 5 items",
      "constructor_args": [
        "period"
      ]
    },
    "fractal.fractalenergyindicator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 7 items",
      "constructor_args": [
        "period"
      ]
    },
    "fractal.fractalmarkethypothesis": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": []
    },
    "fractal.fractalmarketprofile": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 8 items",
      "constructor_args": []
    },
    "fractal.fractalmomentumoscillator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 9 items",
      "constructor_args": []
    },
    "fractal.fractalvolumeanalysis": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 11 items",
      "constructor_args": []
    },
    "fractal.fractalwavecounter": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 8 items",
      "constructor_args": []
    },
    "fractal.fractaladaptivemovingaverage": {
      "status": "passed",
      "result_type": "DataFrame",
      "data_shape": "DataFrame[100x7]",
      "constructor_args": [
        "period"
      ]
    },
    "fractal.hurstexponentcalculator": {
      "status": "passed",
      "result_type": "IndicatorResult",
      "data_shape": "IndicatorResult",
      "constructor_args": []
    },
    "fractal.fractalindicatortemplate": {
      "status": "passed",
      "result_type": "IndicatorResult",
      "data_shape": "IndicatorResult",
      "constructor_args": [
        "config"
      ]
    },
    "fractal.mandelbrotfractalindicator": {
      "status": "passed",
      "result_type": "DataFrame",
      "data_shape": "DataFrame[233x8]",
      "constructor_args": []
    },
    "fractal.multifractaldfa": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for fractal.multifractaldfa's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "fractal.selfsimilaritydetector": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for fractal.selfsimilaritydetector's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "gann.gannanglescalculator": {
      "status": "passed",
      "result_type": "IndicatorResult",
      "data_shape": "IndicatorResult",
      "constructor_args": []
    },
    "gann.gannfanlines": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 12 items",
      "constructor_args": [
        "config"
      ]
    },
    "gann.gannsquareofnine": {
      "status": "failed",
      "error": "Constructor error: IndicatorBase.__init__() got an unexpected keyword argument 'name'",
      "error_type": "TypeError",
      "error_category": "constructor_signature"
    },
    "momentum.awesomeoscillator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "fast_period",
        "slow_period"
      ]
    },
    "momentum.commoditychannelindex": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "period"
      ]
    },
    "momentum.chandemomentumoscillator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "period"
      ]
    },
    "momentum.dynamiccorrelationindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in momentum.dynamiccorrelationindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "momentum.relativemomentumindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in momentum.relativemomentumindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "momentum.detrendedpriceoscillator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "period"
      ]
    },
    "momentum.knowsurething": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 5 items",
      "constructor_args": [
        "signal_period"
      ]
    },
    "momentum.movingaverageconvergencedivergence": {
      "status": "passed",
      "result_type": "DataFrame",
      "data_shape": "DataFrame[100x16]",
      "constructor_args": [
        "fast_period",
        "slow_period",
        "signal_period"
      ]
    },
    "momentum.mfi": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for momentum.mfi's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "momentum.moneyflowindex": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for momentum.moneyflowindex's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "momentum.momentumindicator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "period"
      ]
    },
    "momentum.percentagepriceoscillator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 6 items",
      "constructor_args": [
        "fast_period",
        "slow_period",
        "signal_period"
      ]
    },
    "momentum.rateofchange": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "period"
      ]
    },
    "momentum.relativestrengthindex": {
      "status": "passed",
      "result_type": "DataFrame",
      "data_shape": "DataFrame[100x12]",
      "constructor_args": [
        "period"
      ]
    },
    "momentum.stochasticoscillator": {
      "status": "passed",
      "result_type": "DataFrame",
      "data_shape": "DataFrame[100x20]",
      "constructor_args": [
        "k_period",
        "d_period"
      ]
    },
    "momentum.trix": {
      "status": "failed",
      "error": "Constructor error: IndicatorBase.__init__() got an unexpected keyword argument 'name'",
      "error_type": "TypeError",
      "error_category": "constructor_signature"
    },
    "momentum.truestrengthindex": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 6 items",
      "constructor_args": []
    },
    "momentum.ultimateoscillator": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "fast_period",
        "slow_period"
      ]
    },
    "momentum.williamsr": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 4 items",
      "constructor_args": [
        "period"
      ]
    },
    "pattern.abandonedbabypatternengine": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in pattern.abandonedbabypatternengine. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "pattern.basepatternengine": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in pattern.basepatternengine. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "pattern.beltholdpattern": {
      "status": "passed",
      "result_type": "IndicatorResult",
      "data_shape": "IndicatorResult",
      "constructor_args": []
    },
    "pattern.dojirecognitionengine": {
      "status": "failed",
      "error": "Constructor error: 'super' object has no attribute 'reset'",
      "error_type": "AttributeError",
      "error_category": "missing_methods"
    },
    "pattern.engulfingpatternscanner": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in pattern.engulfingpatternscanner. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "pattern.hammerhangingmandetector": {
      "status": "failed",
      "error": "Constructor error: 'super' object has no attribute 'reset'",
      "error_type": "AttributeError",
      "error_category": "missing_methods"
    },
    "pattern.haramipatternidentifier": {
      "status": "failed",
      "error": "Constructor error: 'super' object has no attribute 'reset'",
      "error_type": "AttributeError",
      "error_category": "missing_methods"
    },
    "pattern.invertedhammershootingstardetector": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 2 items",
      "constructor_args": [
        "volume_factor"
      ]
    },
    "pattern.japanesecandlestickpatterns": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for pattern.japanesecandlestickpatterns's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "pattern.kickingpatternengine": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in pattern.kickingpatternengine. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "pattern.longleggeddojidetector": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 2 items",
      "constructor_args": []
    },
    "pattern.marubozudetector": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 2 items",
      "constructor_args": []
    },
    "pattern.matchingpatternengine": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in pattern.matchingpatternengine. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "pattern.soldierspatternengine": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in pattern.soldierspatternengine. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "pattern.spinningtopdetector": {
      "status": "passed",
      "result_type": "dict",
      "data_shape": "Dict with 2 items",
      "constructor_args": []
    },
    "pattern.starpatternengine": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in pattern.starpatternengine. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "pattern.threeinsidepatternengine": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in pattern.threeinsidepatternengine. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "pattern.threelinestrikepatternengine": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for pattern.threelinestrikepatternengine's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "pattern.threeoutsidepatternengine": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in pattern.threeoutsidepatternengine. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "statistical.betacoefficientindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in statistical.betacoefficientindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "statistical.cointegrationindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in statistical.cointegrationindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "statistical.correlationcoefficientindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in statistical.correlationcoefficientindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "statistical.linearregressionindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in statistical.linearregressionindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "statistical.rsquaredindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in statistical.rsquaredindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "statistical.kurtosisindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in statistical.kurtosisindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "statistical.skewnessindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in statistical.skewnessindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "statistical.standarddeviationindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in statistical.standarddeviationindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "statistical.varianceratioindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in statistical.varianceratioindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "trend.keltnerchannels": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in trend.keltnerchannels. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "trend.vortexindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in trend.vortexindicator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "volume.accumulationdistributionline": {
      "status": "passed",
      "result_type": "AccumulationDistributionSignal",
      "data_shape": "AccumulationDistributionSignal",
      "constructor_args": [
        "config"
      ]
    },
    "volume.chaikinmoneyflow": {
      "status": "passed",
      "result_type": "ChaikinMoneyFlowSignal",
      "data_shape": "ChaikinMoneyFlowSignal",
      "constructor_args": [
        "config",
        "period"
      ]
    },
    "volume.easeofmovement": {
      "status": "passed",
      "result_type": "Series",
      "data_shape": "Series[100]",
      "constructor_args": [
        "config",
        "period"
      ]
    },
    "volume.forceindex": {
      "status": "passed",
      "result_type": "Series",
      "data_shape": "Series[100]",
      "constructor_args": [
        "config",
        "period"
      ]
    },
    "volume.institutionalflowdetector": {
      "status": "failed",
      "error": "Calculation error: Could not find compatible data format for volume.institutionalflowdetector's calculate method. Attempted: ['no_args', 'DataFrame', 'Series (close)', 'Multiple Series (O,H,L,C)', 'OHLCV Series', 'OHLC dict', 'DataFrame as dict', 'numpy arrays', 'numpy array (close)', 'data attribute + calculate()']",
      "error_type": "ValueError",
      "error_category": "data_format",
      "traceback": null
    },
    "volume.klingeroscillator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in volume.klingeroscillator. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "volume.liquidityflowindicator": {
      "status": "failed",
      "error": "Constructor error: TechnicalIndicator.__init__() missing 1 required positional argument: 'config'",
      "error_type": "TypeError",
      "error_category": "constructor_signature"
    },
    "volume.marketmicrostructureindicator": {
      "status": "failed",
      "error": "Constructor error: TechnicalIndicator.__init__() missing 1 required positional argument: 'config'",
      "error_type": "TypeError",
      "error_category": "constructor_signature"
    },
    "volume.negativevolumeindex": {
      "status": "passed",
      "result_type": "Series",
      "data_shape": "Series[100]",
      "constructor_args": [
        "config"
      ]
    },
    "volume.onbalancevolume": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in volume.onbalancevolume. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "volume.orderflowblocktradedetector": {
      "status": "failed",
      "error": "Constructor error: TechnicalIndicator.__init__() missing 1 required positional argument: 'config'",
      "error_type": "TypeError",
      "error_category": "constructor_signature"
    },
    "volume.orderflowsequenceanalyzer": {
      "status": "failed",
      "error": "Constructor error: TechnicalIndicator.__init__() missing 1 required positional argument: 'config'",
      "error_type": "TypeError",
      "error_category": "constructor_signature"
    },
    "volume.positivevolumeindex": {
      "status": "passed",
      "result_type": "Series",
      "data_shape": "Series[100]",
      "constructor_args": [
        "config"
      ]
    },
    "volume.pricevolumerank": {
      "status": "passed",
      "result_type": "tuple",
      "data_shape": "tuple[3]",
      "constructor_args": [
        "config",
        "period"
      ]
    },
    "volume.tickvolumeanalyzer": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in volume.tickvolumeanalyzer. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "volume.volumebreakoutdetector": {
      "status": "passed",
      "result_type": "VolumeBreakoutSignal",
      "data_shape": "VolumeBreakoutSignal",
      "constructor_args": [
        "config"
      ]
    },
    "volume.volumedeltaindicator": {
      "status": "passed",
      "result_type": "VolumeDeltaSignal",
      "data_shape": "VolumeDeltaSignal",
      "constructor_args": [
        "config"
      ]
    },
    "volume.volumeoscillator": {
      "status": "passed",
      "result_type": "Series",
      "data_shape": "Series[100]",
      "constructor_args": [
        "config"
      ]
    },
    "volume.volumepricetrend": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in volume.volumepricetrend. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    },
    "volume.volumerateofchange": {
      "status": "passed",
      "result_type": "Series",
      "data_shape": "Series[100]",
      "constructor_args": [
        "config",
        "period"
      ]
    },
    "volume.volumeweightedmarketdepthindicator": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Missing order book data for volume.volumeweightedmarketdepthindicator",
      "error_type": "ServiceError",
      "error_category": "miscellaneous",
      "traceback": "Traceback (most recent call last):\n  File \"D:\\MD\\Platform3\\engines\\volume\\volume_weighted_market_depth.py\", line 334, in calculate\n    raise ValueError(\"Missing order book data\")\nValueError: Missing order book data\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"D:\\MD\\Platform3\\enhanced_indicator_validator_fixed.py\", line 690, in _execute_calculation\n    result = calculate_method(test_data['dataframe'].copy())\n  File \"D:\\MD\\Platform3\\engines\\volume\\volume_weighted_market_depth.py\", line 391, in calculate\n    raise ServiceError(f\"Calculation failed: {str(e)}\")\nshared.error_handling.platform3_error_system.ServiceError: Calculation failed: Missing order book data\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"D:\\MD\\Platform3\\enhanced_indicator_validator_fixed.py\", line 371, in _validate_single_indicator\n    result = self._execute_calculation(indicator_instance, test_data, indicator_path)\n  File \"D:\\MD\\Platform3\\enhanced_indicator_validator_fixed.py\", line 703, in _execute_calculation\n    raise ServiceError(f\"Calculation failed: Missing order book data for {indicator_path}\") from e\nServiceError: Calculation failed: Missing order book data for volume.volumeweightedmarketdepthindicator\n"
    },
    "volume.volumeweightedaverageprice": {
      "status": "failed",
      "error": "Calculation error: Calculation failed: Ambiguous DataFrame truth value in volume.volumeweightedaverageprice. Indicator needs code update (use a.empty, a.bool(), etc.).",
      "error_type": "ServiceError",
      "error_category": "data_format",
      "traceback": null
    }
  }
}