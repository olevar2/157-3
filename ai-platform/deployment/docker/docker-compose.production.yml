# Docker Compose Production Configuration for Humanitarian AI Trading Platform
# Mission: Generate $300K+ monthly for medical aid, children's surgeries, and poverty relief
# 
# This production configuration is optimized for maximum uptime and humanitarian impact
# Every second of downtime potentially affects life-saving medical funding

version: '3.8'

networks:
  humanitarian-network:
    driver: bridge
    name: humanitarian-ai-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  ai_models_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/ai-models
  humanitarian_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/humanitarian-logs
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # PostgreSQL Database - Primary data store for humanitarian operations
  postgres:
    image: postgres:15-alpine
    container_name: humanitarian-postgres
    environment:
      POSTGRES_DB: platform3_humanitarian
      POSTGRES_USER: humanitarian_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - humanitarian-network
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U humanitarian_user -d platform3_humanitarian"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Redis - High-performance caching for trading operations
  redis:
    image: redis:7-alpine
    container_name: humanitarian-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - humanitarian-network
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # AI Models Service - Core AI/ML inference engine
  ai-models:
    build:
      context: .
      dockerfile: ./ai-platform/Dockerfile.ai-models
    container_name: humanitarian-ai-models
    environment:
      - HUMANITARIAN_MODE=enabled
      - LIVES_AT_STAKE=high
      - CHARITY_TARGET=300000
      - DATABASE_URL=postgresql://humanitarian_user:${POSTGRES_PASSWORD}@postgres:5432/platform3_humanitarian
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - MODEL_REGISTRY_PATH=/app/models
      - LOG_LEVEL=INFO
      - PROMETHEUS_METRICS=enabled
    volumes:
      - ai_models_data:/app/models
      - humanitarian_logs:/app/logs
    networks:
      - humanitarian-network
    ports:
      - "8000:8000"  # HTTP API
      - "8001:8001"  # Metrics
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/humanitarian-impact"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Trading Engine - Core trading and charity fund generation
  trading-engine:
    build:
      context: .
      dockerfile: ./services/Dockerfile.trading-engine
    container_name: humanitarian-trading-engine
    environment:
      - HUMANITARIAN_TRADING_MODE=charity_optimized
      - MEDICAL_AID_PRIORITY=maximum
      - EMERGENCY_STOP_ENABLED=true
      - CHARITY_FUND_PROTECTION=enabled
      - MAX_RISK_TOLERANCE=15
      - DATABASE_URL=postgresql://humanitarian_user:${POSTGRES_PASSWORD}@postgres:5432/platform3_humanitarian
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - AI_MODELS_URL=http://ai-models:8000
      - BROKER_API_KEY=${BROKER_API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - humanitarian_logs:/app/logs
    networks:
      - humanitarian-network
    ports:
      - "8002:8002"  # HTTP API
      - "8003:8003"  # WebSocket
    depends_on:
      ai-models:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health/trading-status"]
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 45s

  # MLOps Pipeline Service - Model deployment and monitoring
  mlops-pipeline:
    build:
      context: .
      dockerfile: ./ai-platform/mlops/Dockerfile.mlops
    container_name: humanitarian-mlops
    environment:
      - HUMANITARIAN_MONITORING=enabled
      - LIVES_IMPACT_TRACKING=enabled
      - DATABASE_URL=postgresql://humanitarian_user:${POSTGRES_PASSWORD}@postgres:5432/platform3_humanitarian
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    volumes:
      - ai_models_data:/app/models
      - humanitarian_logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - humanitarian-network
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health/pipeline-status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Dashboard - Real-time humanitarian impact visualization
  monitoring-dashboard:
    build:
      context: .
      dockerfile: ./ai-platform/mlops/monitoring/Dockerfile.dashboard
    container_name: humanitarian-dashboard
    environment:
      - HUMANITARIAN_DASHBOARD_MODE=lives_impact_tracking
      - CHARITY_METRICS_ENABLED=true
      - DATABASE_URL=postgresql://humanitarian_user:${POSTGRES_PASSWORD}@postgres:5432/platform3_humanitarian
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/3
      - PROMETHEUS_URL=http://prometheus:9090
    volumes:
      - humanitarian_logs:/app/logs
    networks:
      - humanitarian-network
    ports:
      - "8050:8050"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Prometheus - Metrics collection for humanitarian impact tracking
  prometheus:
    image: prom/prometheus:latest
    container_name: humanitarian-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - humanitarian-network
    ports:
      - "9090:9090"
    restart: always

  # Grafana - Advanced visualization for humanitarian metrics
  grafana:
    image: grafana/grafana:latest
    container_name: humanitarian-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_DOMAIN=humanitarian-platform.org
      - GF_SERVER_ROOT_URL=https://humanitarian-platform.org/grafana/
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - humanitarian-network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: always

  # Nginx Reverse Proxy - Load balancer and SSL termination
  nginx:
    image: nginx:alpine
    container_name: humanitarian-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - humanitarian_logs:/var/log/nginx
    networks:
      - humanitarian-network
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - ai-models
      - trading-engine
      - monitoring-dashboard
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Market Data Service - Real-time market data ingestion
  market-data:
    build:
      context: .
      dockerfile: ./services/Dockerfile.market-data
    container_name: humanitarian-market-data
    environment:
      - HUMANITARIAN_DATA_MODE=enabled
      - DATABASE_URL=postgresql://humanitarian_user:${POSTGRES_PASSWORD}@postgres:5432/platform3_humanitarian
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/4
      - MARKET_DATA_PROVIDERS=${MARKET_DATA_PROVIDERS}
      - DATA_QUALITY_THRESHOLD=99.5
    networks:
      - humanitarian-network
    ports:
      - "8005:8005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Risk Management Service - Humanitarian fund protection
  risk-management:
    build:
      context: .
      dockerfile: ./services/Dockerfile.risk-management
    container_name: humanitarian-risk-management
    environment:
      - HUMANITARIAN_RISK_MODE=charity_protection
      - MAX_PORTFOLIO_RISK=15
      - EMERGENCY_STOP_THRESHOLD=5
      - LIVES_AT_STAKE_PROTECTION=enabled
      - DATABASE_URL=postgresql://humanitarian_user:${POSTGRES_PASSWORD}@postgres:5432/platform3_humanitarian
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/5
    networks:
      - humanitarian-network
    ports:
      - "8006:8006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Log Aggregation Service - Centralized logging for humanitarian operations
  loki:
    image: grafana/loki:latest
    container_name: humanitarian-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki:/etc/loki
    networks:
      - humanitarian-network
    ports:
      - "3100:3100"
    restart: always

  # Log Shipping Agent
  promtail:
    image: grafana/promtail:latest
    container_name: humanitarian-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail:/etc/promtail
      - humanitarian_logs:/var/log/humanitarian
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - humanitarian-network
    depends_on:
      - loki
    restart: always

  # Health Check Service - Overall system health monitoring
  health-monitor:
    build:
      context: .
      dockerfile: ./monitoring/Dockerfile.health-monitor
    container_name: humanitarian-health-monitor
    environment:
      - HUMANITARIAN_HEALTH_MODE=enabled
      - ALERT_THRESHOLD_LIVES_AT_STAKE=high
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - EMAIL_ALERTS_ENABLED=true
      - SMS_ALERTS_ENABLED=true
    networks:
      - humanitarian-network
    ports:
      - "8007:8007"
    depends_on:
      - prometheus
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

# Override configurations for different environments
x-development: &development-overrides
  restart: "no"
  deploy:
    resources:
      limits:
        memory: 1G
        cpus: '0.5'

x-staging: &staging-overrides
  restart: unless-stopped
  deploy:
    resources:
      limits:
        memory: 2G
        cpus: '1.0'

x-production: &production-overrides
  restart: always
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"
  deploy:
    resources:
      reservations:
        memory: 1G
        cpus: '0.5'
