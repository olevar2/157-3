"""
Unit tests for japanese_candlesticks
Generated by Platform3 Test Template Generator
"""

import unittest
import sys
import numpy as np
import pandas as pd
from unittest.mock import Mock, patch, MagicMock
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent.parent

# Import the module under test
try:
    from engines.pattern.japanese_candlestick_patterns import (
        JapaneseCandlestickPatterns, PatternType, CandleData, PatternResult
    )
except ImportError as e:
    import pytest
    pytest.skip(f"Could not import module: {e}", allow_module_level=True)

class TestJapaneseCandlesticks(unittest.TestCase):
    """Test suite for japanese_candlesticks"""
    
    def setUp(self):
        """Set up test fixtures before each test method"""
        self.detector = JapaneseCandlestickPatterns()
        
        # Create sample OHLCV data
        self.sample_data = pd.DataFrame({
            'open': [100, 102, 101, 103, 102],
            'high': [103, 104, 103, 105, 104],
            'low': [99, 101, 100, 102, 101],
            'close': [102, 101, 103, 102, 103],
            'volume': [1000, 1100, 900, 1200, 1000]
        }, index=pd.date_range('2024-01-01', periods=5))
    
    def test_initialization(self):
        """Test JapaneseCandlestickPatterns initialization"""
        self.assertIsNotNone(self.detector)
        self.assertEqual(self.detector.doji_threshold, 0.1)
        self.assertEqual(self.detector.shadow_ratio_threshold, 2.0)
        self.assertEqual(self.detector.trend_period, 10)
        self.assertTrue(self.detector.volume_confirmation)
    
    def test_calculate_basic(self):
        """Test basic pattern calculation"""
        result = self.detector.calculate(self.sample_data)
        
        self.assertIn('patterns', result)
        self.assertIn('pattern_count', result)
        self.assertIn('analysis', result)
        self.assertIn('strongest_pattern', result)
        self.assertIn('trend_context', result)
    
    def test_doji_detection(self):
        """Test Doji pattern detection"""
        # Create data with doji pattern
        doji_data = pd.DataFrame({
            'open': [100, 100.1],
            'high': [102, 101],
            'low': [98, 99],
            'close': [100.05, 100.15],
            'volume': [1000, 1000]
        })
        
        result = self.detector.calculate(doji_data)
        patterns = result.get('patterns', [])
        
        # Should detect at least one doji
        doji_patterns = [p for p in patterns if 'Doji' in p['name']]
        self.assertGreater(len(doji_patterns), 0)
    
    def test_engulfing_pattern(self):
        """Test Engulfing pattern detection"""
        # Create bullish engulfing pattern
        engulfing_data = pd.DataFrame({
            'open': [100, 102, 101, 99],
            'high': [102, 103, 102, 104],
            'low': [99, 101, 100, 98],
            'close': [99, 101, 100, 103],  # Last candle engulfs previous
            'volume': [1000, 1000, 1000, 1500]
        })
        
        result = self.detector.calculate(engulfing_data)
        patterns = result.get('patterns', [])
        
        # Check for engulfing pattern
        engulfing_patterns = [p for p in patterns if 'Engulfing' in p['name']]
        self.assertGreater(len(engulfing_patterns), 0)
    
    def test_hammer_pattern(self):
        """Test Hammer pattern detection"""
        # Create hammer pattern (small body, long lower shadow)
        hammer_data = pd.DataFrame({
            'open': [100, 99, 98, 97.5],
            'high': [100.5, 99.5, 98.5, 98],
            'low': [99, 98, 97, 95],  # Long lower shadow
            'close': [99.5, 98.5, 97.5, 97.8],
            'volume': [1000, 1000, 1000, 1200]
        })
        
        result = self.detector.calculate(hammer_data)
        patterns = result.get('patterns', [])
        
        # Check for hammer pattern
        hammer_patterns = [p for p in patterns if 'Hammer' in p['name']]
        self.assertGreater(len(hammer_patterns), 0)
    
    def test_morning_star_pattern(self):
        """Test Morning Star pattern detection"""
        # Create morning star pattern
        morning_star_data = pd.DataFrame({
            'open': [100, 99, 98, 96, 95.5, 96.5],
            'high': [100.5, 99.5, 98.5, 96.5, 96, 98.5],
            'low': [99, 98, 97, 95, 95, 96],
            'close': [99, 98, 97, 95.5, 96, 98],  # Bearish, small body, bullish
            'volume': [1000, 1100, 1200, 900, 800, 1300]
        })
        
        result = self.detector.calculate(morning_star_data)
        patterns = result.get('patterns', [])
        
        # Check for star patterns
        star_patterns = [p for p in patterns if 'Star' in p['name']]
        self.assertGreaterEqual(len(star_patterns), 0)  # May or may not detect depending on trend
    
    def test_three_white_soldiers(self):
        """Test Three White Soldiers pattern detection"""
        # Create three white soldiers pattern
        soldiers_data = pd.DataFrame({
            'open': [100, 100.5, 101.5, 102.5],
            'high': [101, 102, 103, 104],
            'low': [99.8, 100.3, 101.3, 102.3],
            'close': [100.8, 101.8, 102.8, 103.8],  # Three consecutive bullish candles
            'volume': [1000, 1100, 1200, 1300]
        })
        
        result = self.detector.calculate(soldiers_data)
        patterns = result.get('patterns', [])
        
        # Check for three white soldiers
        soldier_patterns = [p for p in patterns if 'White Soldiers' in p['name']]
        self.assertGreaterEqual(len(soldier_patterns), 0)
    
    def test_pattern_strength_calculation(self):
        """Test pattern strength calculation"""
        result = self.detector.calculate(self.sample_data)
        patterns = result.get('patterns', [])
        
        for pattern in patterns:
            self.assertIn('strength', pattern)
            self.assertGreaterEqual(pattern['strength'], 0)
            self.assertLessEqual(pattern['strength'], 100)
    
    def test_trend_context_analysis(self):
        """Test trend context analysis"""
        # Create trending data
        uptrend_data = pd.DataFrame({
            'open': [100 + i*0.5 for i in range(20)],
            'high': [101 + i*0.5 for i in range(20)],
            'low': [99 + i*0.5 for i in range(20)],
            'close': [100.5 + i*0.5 for i in range(20)],
            'volume': [1000] * 20
        })
        
        result = self.detector.calculate(uptrend_data)
        trend_context = result.get('trend_context', {})
        
        self.assertIn('trend', trend_context)
        self.assertEqual(trend_context['trend'], 'uptrend')
    
    def test_empty_data_handling(self):
        """Test handling of empty data"""
        empty_data = pd.DataFrame()
        
        with self.assertRaises(Exception):
            self.detector.calculate(empty_data)
    
    def test_invalid_data_handling(self):
        """Test handling of invalid data"""
        # Missing required columns
        invalid_data = pd.DataFrame({
            'open': [100, 101],
            'close': [101, 102]
            # Missing high, low, volume
        })
        
        with self.assertRaises(Exception):
            self.detector.calculate(invalid_data)

if __name__ == '__main__':
    unittest.main()
