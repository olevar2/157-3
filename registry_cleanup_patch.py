# Remove duplicate entries from INDICATOR_REGISTRY
duplicates_to_remove = [
    'abandonedbabysignal',
    'accumulationdistributionsignal',
    'adaptive_rsi',
    'advancedmlengine',
    'attractorpoint',
    'autocorrelationindicator',
    'beltholdtype',
    'betacoefficientindicator',
    'chaikinmoneyflowsignal',
    'chaikinvolatility',
    'cointegrationindicator',
    'compositesignal',
    'confluencearea',
    'correlationcoefficientindicator',
    'correlationmatrix',
    'darkcloudtype',
    'dojitype',
    'dynamic_correlation',
    'easeofmovement',
    'engulfingtype',
    'extensionlevel',
    'fanline',
    'fibonaccilevel',
    'fibonacciprojection',
    'forceindex',
    'fractaladaptivemovingaverage',
    'fractalchannelindicator',
    'fractalchaososcillator',
    'fractalcorrelationdimension',
    'fractaldimensioncalculator',
    'fractalefficiencyratio',
    'fractalenergyindicator',
    'fractalmarkethypothesis',
    'fractalmarketprofile',
    'gannangle',
    'gannanglestimecycles',
    'gannpattern',
    'geneticalgorithmoptimizer',
    'gridline',
    'hammertype',
    'haramitype',
    'highwavecandlepattern',
    'historicalvolatility',
    'hurstexponentcalculator',
    'institutionalflowsignal',
    'invertedhammershootingstarpattern',
    'keltnerchannels',
    'kickingsignal',
    'klingeroscillator',
    'linearregressionchannels',
    'linearregressionindicator',
    'liquidityflowsignal',
    'longleggeddojipattern',
    'mandelbrotfractalindicator',
    'marubozupattern',
    'massindex',
    'matchingsignal',
    'multifractaldfa',
    'neuralnetworkpredictor',
    'piercinglinetype',
    'pricetimerelationships',
    'regime_adaptive_ma',
    'relativevolatilityindex',
    'rsquaredindicator',
    'selfsimilaritysignal',
    'skewnessindicator',
    'smart_money_index',
    'soldierssignal',
    'spinningtoppattern',
    'squarelevel',
    'standarddeviationchannels',
    'standarddeviationindicator',
    'starsignal',
    'threeinsidesignal',
    'threelinestrikesignal',
    'threeoutsidesignal',
    'timecycle',
    'timezone',
    'tweezertype',
    'varianceratioindicator',
    'volatilityindex',
    'zscoreindicator',
]

for duplicate in duplicates_to_remove:
    if duplicate in INDICATOR_REGISTRY:
        del INDICATOR_REGISTRY[duplicate]

# Add additional indicator to reach 157 target
try:
    from engines.ai_enhancement.additional_indicator import MarketEfficiencyRatio
except ImportError:
    class MarketEfficiencyRatio:
        def __init__(self, *args, **kwargs): pass
        def calculate(self, data): return None

INDICATOR_REGISTRY['market_efficiency_ratio'] = MarketEfficiencyRatio